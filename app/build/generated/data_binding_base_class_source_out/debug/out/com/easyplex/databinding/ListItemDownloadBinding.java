// Generated by data binding compiler. Do not edit!
package com.easyplex.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.easyplex.R;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class ListItemDownloadBinding extends ViewDataBinding {
  @NonNull
  public final FrameLayout cardView;

  @NonNull
  public final ImageButton downloadEpisode;

  @NonNull
  public final ConstraintLayout epLayout;

  @NonNull
  public final ImageView epcover;

  @NonNull
  public final TextView epoverview;

  @NonNull
  public final TextView eptitle;

  @NonNull
  public final ProgressBar resumeProgressBar;

  protected ListItemDownloadBinding(Object _bindingComponent, View _root, int _localFieldCount,
      FrameLayout cardView, ImageButton downloadEpisode, ConstraintLayout epLayout,
      ImageView epcover, TextView epoverview, TextView eptitle, ProgressBar resumeProgressBar) {
    super(_bindingComponent, _root, _localFieldCount);
    this.cardView = cardView;
    this.downloadEpisode = downloadEpisode;
    this.epLayout = epLayout;
    this.epcover = epcover;
    this.epoverview = epoverview;
    this.eptitle = eptitle;
    this.resumeProgressBar = resumeProgressBar;
  }

  @NonNull
  public static ListItemDownloadBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.list_item_download, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static ListItemDownloadBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<ListItemDownloadBinding>inflateInternal(inflater, R.layout.list_item_download, root, attachToRoot, component);
  }

  @NonNull
  public static ListItemDownloadBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.list_item_download, null, false, component)
   */
  @NonNull
  @Deprecated
  public static ListItemDownloadBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<ListItemDownloadBinding>inflateInternal(inflater, R.layout.list_item_download, null, false, component);
  }

  public static ListItemDownloadBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static ListItemDownloadBinding bind(@NonNull View view, @Nullable Object component) {
    return (ListItemDownloadBinding)bind(component, view, R.layout.list_item_download);
  }
}
